!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC := gcc$/;"	m
CFLAG	Makefile	/^CFLAG := -O0 -Wall -g$/;"	m
Config	main.c	/^} Config;$/;"	t	typeref:struct:__anon3	file:
DTR	stm32.h	/^	DTR = 1,$/;"	e	enum:__anon2
ESC_CHAR	term.c	16;"	d	file:
HEXFILE_H_	hexfile.h	9;"	d
HexRecord	hexfile.c	/^} HexRecord;$/;"	t	typeref:struct:__anon5	file:
MARK	hexfile.c	11;"	d	file:
MAXLEN	stm32.c	39;"	d	file:
MAXTRY	stm32.c	40;"	d	file:
MEMMAP_H_	memmap.h	9;"	d
MMAP_BLOCK_SIZE	memmap.h	11;"	d
MemBlock	memmap.h	/^} MemBlock;$/;"	t	typeref:struct:_mem_block
MemMap	memmap.h	/^} MemMap;$/;"	t	typeref:struct:__anon6
OBJS	Makefile	/^OBJS := main.o hexfile.o memmap.o serial.o stm32.o term.o$/;"	m
RM	Makefile	/^RM := rm -rf$/;"	m
RTS	stm32.h	/^	RTS = 2,$/;"	e	enum:__anon2
SER_ERR	serial.h	/^	SER_ERR = -1,$/;"	e	enum:__anon4
SER_OK	serial.h	/^	SER_OK  =  0,$/;"	e	enum:__anon4
SER_TO	serial.h	/^	SER_TO  = -2,$/;"	e	enum:__anon4
STM32_ACK	stm32.c	33;"	d	file:
STM32_NACK	stm32.c	34;"	d	file:
STM_ERR	stm32.h	/^	STM_ERR = -1,$/;"	e	enum:__anon1
STM_OK	stm32.h	/^	STM_OK  = 0$/;"	e	enum:__anon1
Stm32Info	stm32.c	/^}Stm32Info;$/;"	t	typeref:struct:__anon7	file:
TARGET	Makefile	/^TARGET := stm32isp$/;"	m
TERM_H_	term.h	9;"	d
TIMEDOUT	serial.c	31;"	d	file:
TM_BOOTP	stm32.c	41;"	d	file:
TM_RESET	stm32.c	42;"	d	file:
__SERIAL_H	serial.h	22;"	d
__STM32_H	stm32.h	23;"	d
_mem_block	memmap.h	/^typedef struct _mem_block {$/;"	s
addrPacket	stm32.c	/^static unsigned char *addrPacket(unsigned int addr, unsigned char *buffer)$/;"	f	file:
address	memmap.h	/^	unsigned int address;$/;"	m	struct:_mem_block
baudrate	main.c	/^	int 	baudrate;$/;"	m	struct:__anon3	file:
board	stm32.c	/^static Stm32Info board;$/;"	v	file:
bootp	main.c	/^	int		bootp;$/;"	m	struct:__anon3	file:
bootp	stm32.c	/^	int bootp;$/;"	m	struct:__anon7	file:
calcChecksum	stm32.c	/^static unsigned char calcChecksum(unsigned char* data, unsigned int len)$/;"	f	file:
cmd	stm32.c	/^	uint8_t cmd[16];$/;"	m	struct:__anon7	file:
data	hexfile.c	/^	unsigned char *data;$/;"	m	struct:__anon5	file:
data	memmap.h	/^	unsigned char data[MMAP_BLOCK_SIZE];$/;"	m	struct:_mem_block
dumpOptions	main.c	/^static void dumpOptions(Config *p)$/;"	f	file:
fileName	main.c	/^	char* 	fileName;$/;"	m	struct:__anon3	file:
head	memmap.h	/^	MemBlock* head;$/;"	m	struct:__anon6
isBin	main.c	/^	int 	isBin;$/;"	m	struct:__anon3	file:
isDetect	main.c	/^	int		isDetect;$/;"	m	struct:__anon3	file:
isEcho	main.c	/^	int		isEcho;$/;"	m	struct:__anon3	file:
isLine	main.c	/^	int		isLine;$/;"	m	struct:__anon3	file:
isTerm	main.c	/^	int		isTerm;$/;"	m	struct:__anon3	file:
isVerbose	main.c	/^	int		isVerbose;$/;"	m	struct:__anon3	file:
lastValid	memmap.h	/^	unsigned int lastValid;$/;"	m	struct:_mem_block
len	hexfile.c	/^	unsigned char len;$/;"	m	struct:__anon5	file:
logFile	main.c	/^	char*	logFile;$/;"	m	struct:__anon3	file:
main	main.c	/^int main(int argc, char *argv[])$/;"	f
mmapDelete	memmap.c	/^void mmapDelete(MemMap* mp)$/;"	f
mmapDump	memmap.c	/^void mmapDump(MemMap* mp)$/;"	f
mmapInit	memmap.c	/^void mmapInit(MemMap* mp)$/;"	f
mmapPut	memmap.c	/^void mmapPut(MemMap* mp, unsigned int address, unsigned int len, unsigned char *data)$/;"	f
next	memmap.h	/^	struct _mem_block *next;$/;"	m	struct:_mem_block	typeref:struct:_mem_block::_mem_block
offset	hexfile.c	/^	unsigned short offset;$/;"	m	struct:__anon5	file:
parseOptions	main.c	/^static int parseOptions(int argc, char* argv[], Config* p)$/;"	f	file:
parsePin	main.c	/^static int parsePin(char* s)$/;"	f	file:
pid	stm32.c	/^	uint8_t pid[8];$/;"	m	struct:__anon7	file:
portName	main.c	/^	char* 	portName;$/;"	m	struct:__anon3	file:
prompt	main.c	/^static void prompt()$/;"	f	file:
readHexFile	hexfile.c	/^int readHexFile(char* fileName, MemMap *mp)$/;"	f
readRecord	hexfile.c	/^static int readRecord(FILE *fp, HexRecord *pRec)$/;"	f	file:
readprotect	stm32.c	/^	int readprotect;$/;"	m	struct:__anon7	file:
reset	main.c	/^	int		reset;$/;"	m	struct:__anon3	file:
reset	stm32.c	/^	int reset;$/;"	m	struct:__anon7	file:
sendCommand	stm32.c	/^static int sendCommand(unsigned char byte)$/;"	f	file:
serialClose	serial.c	/^int serialClose(int fd)$/;"	f
serialFlush	serial.c	/^void serialFlush(int fd)$/;"	f
serialOpen	serial.c	/^int serialOpen(const char *device, unsigned int baudrate, unsigned int bits, char parity, unsigned int stop)$/;"	f
serialRead	serial.c	/^int serialRead(int fd, unsigned char *buffer, int len)$/;"	f
serialResetPin	serial.c	/^void serialResetPin(int fd, int pin) {$/;"	f
serialSetPin	serial.c	/^void serialSetPin(int fd, int pin) {$/;"	f
serialWrite	serial.c	/^int serialWrite(int fd, unsigned char *buffer, int len)$/;"	f
serial_fd	stm32.c	/^	int serial_fd;$/;"	m	struct:__anon7	file:
setBootp	term.c	/^static void setBootp(int fd, int bootp)$/;"	f	file:
stm32Close	stm32.c	/^void stm32Close()$/;"	f
stm32CmdGet	stm32.c	/^int stm32CmdGet()$/;"	f
stm32Erase	stm32.c	/^int stm32Erase()$/;"	f
stm32GetID	stm32.c	/^int stm32GetID()$/;"	f
stm32GetVersion	stm32.c	/^int stm32GetVersion()$/;"	f
stm32Go	stm32.c	/^int stm32Go(unsigned int addr)$/;"	f
stm32Init	stm32.c	/^int stm32Init(const char* port, unsigned int baudrate, int bootp, int reset)$/;"	f
stm32Read	stm32.c	/^int stm32Read(unsigned char *data, unsigned int len, unsigned int addr)$/;"	f
stm32Reboot	stm32.c	/^void stm32Reboot(int fd, int reset)$/;"	f
stm32Reboot2isp	stm32.c	/^int stm32Reboot2isp()$/;"	f
stm32Sync	stm32.c	/^int stm32Sync()$/;"	f
stm32Verify	stm32.c	/^int stm32Verify(MemMap* mm)$/;"	f
stm32Write	stm32.c	/^int stm32Write(MemMap* mp)$/;"	f
stm32WriteBlock	stm32.c	/^static int stm32WriteBlock(unsigned char *data, unsigned int len, unsigned int addr)$/;"	f	file:
term	term.c	/^int term(char* portName, int baud, int bootp, int reset, int isEcho, int isLine)$/;"	f
termBaud	main.c	/^	int		termBaud;$/;"	m	struct:__anon3	file:
type	hexfile.c	/^	unsigned char type;$/;"	m	struct:__anon5	file:
verifyCondig	main.c	/^static int verifyCondig(Config *p)$/;"	f	file:
version	stm32.c	/^	uint8_t version;$/;"	m	struct:__anon7	file:
waitAck	stm32.c	/^static int waitAck()$/;"	f	file:
writeprotect	stm32.c	/^	int writeprotect;$/;"	m	struct:__anon7	file:
